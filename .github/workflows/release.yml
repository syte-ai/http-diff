name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS:
      TARGET_DIR: ./target
      CROSS_VERSION: v0.2.5
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
            strip: x86_64-linux-musl-strip
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          scripts/ubuntu-install-dependencies

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Use Cross
        if: matrix.os == 'ubuntu-latest' && matrix.target != ''
        shell: bash
        run: |
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
          tar xf cross-x86_64-unknown-linux-musl.tar.gz
          echo "CARGO=cross" >> $GITHUB_ENV

      - name: Set target variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        shell: bash
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        shell: bash
        run: |
          ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
          bin="target/${{ matrix.target }}/release/http-diff"
          build_assets="target/${{ matrix.target }}/assets"
          echo "BIN=$bin" >> $GITHUB_ENV
          echo "BUILD_ASSETS_DIR=$build_assets" >> $GITHUB_ENV

      - name: Strip release binary (macos)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: strip "$BIN"

      - name: Strip release binary (cross)
        if: env.CARGO == 'cross'
        shell: bash
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            "ghcr.io/cross-rs/${{ matrix.target }}:main" \
            "${{ matrix.strip }}" \
            "/$BIN"

      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=http-diff-$version-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Creating directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"/{complete,doc}
          cp "$BIN" "$ARCHIVE"/
          cp {README.md,COPYING,UNLICENSE,LICENSE-MIT} "$ARCHIVE"/
          mv "$BUILD_ASSETS_DIR/http-diff.1" "$ARCHIVE/doc/"/
          cp -a "$BUILD_ASSETS_DIR/" "$ARCHIVE/complete/"

      - name: Build archive (Unix)
        shell: bash
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}

  build-release-deb:
    name: build-release-deb
    needs: ["create-release"]
    runs-on: ubuntu-latest
    env:
      TARGET: x86_64-unknown-linux-musl
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install packages (Ubuntu)
        shell: bash
        run: |
          scripts/ubuntu-install-dependencies

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          target: ${{ env.TARGET }}

      - name: Install cargo-deb
        shell: bash
        run: |
          cargo install cargo-deb

      - name: Build release binary with assets
        shell: bash
        run: |
          cargo build -r --target ${{ env.TARGET }}
          echo "moving assets level up"
          mv "target/${{ env.TARGET }}/assets/" target/

      - name: Create .deb file
        shell: bash
        run: |
          cargo deb --no-build --target ${{ env.TARGET }}
          version="${{ needs.create-release.outputs.version }}"
          echo "DEB_DIR=target/${{ env.TARGET }}/debian" >> $GITHUB_ENV
          echo "DEB_NAME=http-diff_$version-1_amd64.deb" >> $GITHUB_ENV

      - name: Create sha256 sum of deb file
        shell: bash
        run: |
          cd "$DEB_DIR"
          sum="$DEB_NAME.sha256"
          shasum -a 256 "$DEB_NAME" > "$sum"
          echo "SUM=$sum" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          cd "$DEB_DIR"
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" "$DEB_NAME" "$SUM"
